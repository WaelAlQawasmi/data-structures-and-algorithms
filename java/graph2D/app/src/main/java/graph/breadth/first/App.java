/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graph.breadth.first;

import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Set;
import java.util.stream.Collectors;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        Graph graph = new Graph();


        graph.addNode("Pandora");
        graph.addNode("Arendelle");
        graph.addNode("Metroville");
        graph.addNode("Monstroplolis");
        graph.addNode("Narnia");
        graph.addNode("Naboo");

        graph.addEdge(new Vertex("Pandora"), new Vertex("Arendelle"));
        graph.addEdge(new Vertex("Metroville"), new Vertex("Arendelle"));
        graph.addEdge(new Vertex("Monstroplolis"), new Vertex("Arendelle"));
        graph.addEdge(new Vertex("Monstroplolis"), new Vertex("Metroville"));
        graph.addEdge(new Vertex("Metroville"), new Vertex("Narnia"));

        graph.addEdge(new Vertex("Naboo"), new Vertex("Metroville"));
        graph.addEdge(new Vertex("Naboo"), new Vertex("Monstroplolis"));
        graph.addEdge(new Vertex("Narnia"), new Vertex("Naboo"));

        System.out.println(graph.breadthFirst(new Vertex("Pandora")));
        int[][] arr={{0,1,0,0,1},
                {1,0,1,1, 0},
                {0, 1, 0, 1, 0},
                {0  ,1  ,1  ,0  ,1},
                {  1,  0,  0,  1,  0}};
        represintaion(arr);

    }

    public static String represintaion(int[][] arr) {
        Vertex[] nodes = {new Vertex("a"), new Vertex("b"), new Vertex("c"), new Vertex("d"), new Vertex("e")};

        Graph graph = new Graph();
        graph.addNode("a");
        graph.addNode("b");
        graph.addNode("c");
        graph.addNode("d");
        graph.addNode("e");


        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr[i].length; j++) {

                if (arr[i][j] == 1) {
                    graph.addEdge(nodes[i], nodes[j]);

                }
            }
        }
        String RString = "";
        for (Vertex x:nodes) {
            String listString =  graph.getNeighbors(x).stream().map(Object::toString)
                    .collect(Collectors.joining("->"));

            RString+=x.data+"|->"+listString+"\n";
           // System.out.println(x.data+"|->"+listString );
        }
        System.out.println(RString);
return RString;
    }


}
