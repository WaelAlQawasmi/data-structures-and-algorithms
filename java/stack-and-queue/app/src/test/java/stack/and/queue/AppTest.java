/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stack.and.queue;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import stack.and.queue.stack.Node;
import stack.and.queue.stack.Queue;
import stack.and.queue.stack.stack;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @BeforeEach
    void setUp() {


    }
    @Test void pushOne() {
        stack newstack=new stack();
        Node newNode= new Node("wael");
        newstack.push(newNode);
        assertEquals(newstack.toString(),"stack{wael =>null}");

    }

    @Test void pushmulti() {
        stack newstack=new stack();
        Node newNode= new Node("wael");
        Node newNode3= new Node("yazan");
        newstack.push(newNode);
        newstack.push(newNode3);
        assertEquals(newstack.toString(),"stack{yazan =>wael =>null}");

    }

    @Test void pop() {
        stack newstack=new stack();
        Node newNode= new Node("wael");
        Node newNode3= new Node("yazan");
        newstack.push(newNode);
        newstack.push(newNode3);
        newstack.pop();
        assertEquals(newstack.toString(),"stack{wael =>null}");

    }

    @Test void muliPopEmpty() {
        stack newstack=new stack();
        Node newNode= new Node("wael");
        Node newNode3= new Node("yazan");
        newstack.push(newNode);
        newstack.push(newNode3);
        newstack.pop();
        newstack.pop();
      //  System.out.println("..................."+newstack.toString());
     assertEquals(newstack.toString(),"stack{null}");

    }

    @Test void Peak() {
        stack newstack=new stack();
        Node newNode= new Node("wael");
        Node newNode3= new Node("yazan");
        newstack.push(newNode);
        newstack.push(newNode3);

        //  System.out.println("..................."+newstack.toString());
        assertEquals(newstack.peek(),"yazan");

    }



    ///QQQQQQQQQQQQQQQQQQQQQ////////////////
    @Test void pushOneQ() {
        Queue newstack=new Queue();
        Node newNode= new Node("wael");
        newstack.enqueue(newNode);
        assertEquals(newstack.toString(),"Queue{wael =>}");

    }



    @Test void popQempty() {
        Queue newstack=new Queue();
        Node newNode= new Node("wael");
        Node newNode3= new Node("yazan");
        newstack.enqueue(newNode);
        newstack.enqueue(newNode3);
        newstack.dequeue();
        newstack.dequeue();
        assertEquals(newstack.toString(),"Queue{}");

    }



    @Test void PeakQ() {
            Queue newstack=new Queue();
        Node newNode= new Node("wael");
        Node newNode3= new Node("yazan");
        newstack.enqueue(newNode);
        newstack.enqueue(newNode3);

        //  System.out.println("..................."+newstack.toString());
        assertEquals(newstack.peek(),"wael");

    }
}
