/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package tree.intersection;

import org.junit.jupiter.api.Test;
import tree.intersection.TreeIntersection.TreeIntersection;

import java.lang.reflect.Array;
import java.util.HashSet;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }

    @Test void TEST() {
        BineryTree TREE=new BineryTree();
        BineryTree TREEtoo=new BineryTree();

        BTNode<String> one= new BTNode(150);
        BTNode<String> two= new BTNode("250");
        BTNode<String> three= new BTNode("100");
        BTNode<String> fore= new BTNode("75");
        BTNode<String> th5= new BTNode(160);
        BTNode<String> th6= new BTNode("200");
        BTNode<String> th7= new BTNode("350");
        BTNode<String> th8= new BTNode("125");
        BTNode<String> th9= new BTNode("175");
        BTNode<String> th10= new BTNode(300);
        BTNode<String> th11= new BTNode("500");

        TREE.setRoot(one);
        one.setLeft(two);
        one.setRight(three);
        one.getRight().setRight(fore);
        one.getRight().setLeft(th5);
        one.getRight().getRight().setLeft(th6);
        one.getRight().getRight().setRight(th7);
        one.getRight().getLeft().setLeft(th8);
        one.getRight().getLeft().setRight(th9);
        one.getRight().getLeft().getLeft().setRight(th9);
        one.getRight().getLeft().getRight().setRight(th10);
        one.getRight().getLeft().getRight().getRight().setRight(th11);



        BTNode<String> onep= new BTNode(42);
        BTNode<String> twop= new BTNode("15");
        BTNode<String> threpe= new BTNode("100");
        BTNode<String> forep= new BTNode("600");
        BTNode<String> th5p= new BTNode(200);
        BTNode<String> th6p= new BTNode("160");
        BTNode<String> th7p= new BTNode("175");
        BTNode<String> th8p= new BTNode("125");
        BTNode<String> th9p= new BTNode("4");
        BTNode<String> th10p= new BTNode(350);
        BTNode<String> th11p= new BTNode("500");

        TREEtoo.setRoot(onep);
        onep.setLeft(twop);
        onep.setRight(threpe);
        onep.getRight().setRight(forep);
        onep.getRight().setLeft(th5p);
        onep.getRight().getRight().setLeft(th6p);
        onep.getRight().getRight().setRight(th7p);
        onep.getRight().getLeft().setLeft(th8p);
        onep.getRight().getLeft().setRight(th9p);
        onep.getRight().getLeft().getLeft().setRight(th9p);
        onep.getRight().getLeft().getRight().setRight(th10p);
        onep.getRight().getLeft().getRight().getRight().setRight(th11p);

        System.out.println(  TreeIntersection.tree_intersection(TREE,TREEtoo));
        String[]expected={"100", "200", "125", "500", "160", "350", "175"};
        assertArrayEquals(TreeIntersection.tree_intersection(TREE,TREEtoo).toArray(),expected);
    }
}
